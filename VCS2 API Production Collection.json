{
	"info": {
		"_postman_id": "7c75bd0b-93fc-4a86-91ab-dbf730831e60",
		"name": "VCS2 API Production",
		"description": "Welcome to the VeChain Stats official Postman API collection.\n\n**Detailed Documentation:**  \nFor an in-depth understanding of each endpoint, parameters, response formats, and sample requests, please refer to our comprehensive documentation:  \n[docs.vechainstats.com](https://docs.vechainstats.com)\n\n**Need Help?**  \nIf you encounter any issues or need further assistance, feel free to [reach out](https://vechainstats.com/contact/) to our team or check out our FAQs in the documentation link above.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "48953671",
		"_collection_link": "https://www.postman.com/vechainstats/vcs2-api-production/collection/rnipnez/vcs2-api-production?action=share&source=collection_link&creator=48953671"
	},
	"item": [
		{
			"name": "V2",
			"item": [
				{
					"name": "Account",
					"item": [
						{
							"name": "Account Daily Stats",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.vechainstats.com/v2/account/stats?date=2023-09-25&expanded=true",
									"protocol": "https",
									"host": [
										"api",
										"vechainstats",
										"com"
									],
									"path": [
										"v2",
										"account",
										"stats"
									],
									"query": [
										{
											"key": "date",
											"value": "2023-09-25"
										},
										{
											"key": "expanded",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Account Extended Stats",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.vedev.io/v2/account/extended-stats?date=2024-08-19",
									"protocol": "https",
									"host": [
										"api",
										"vedev",
										"io"
									],
									"path": [
										"v2",
										"account",
										"extended-stats"
									],
									"query": [
										{
											"key": "date",
											"value": "2024-08-19"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Account Info",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.vechainstats.com/v2/account/info?address=0xFF5ba88a17b2E16D23FF6647E9052E937AcB1406&expanded=true",
									"protocol": "https",
									"host": [
										"api",
										"vechainstats",
										"com"
									],
									"path": [
										"v2",
										"account",
										"info"
									],
									"query": [
										{
											"key": "address",
											"value": "0xFF5ba88a17b2E16D23FF6647E9052E937AcB1406"
										},
										{
											"key": "expanded",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Account VTHO Info",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.vechainstats.com/v2/account/vtho-info?address=0x0da8fa475c8272d21be204fe8112d1e2cd698c96",
									"protocol": "https",
									"host": [
										"api",
										"vechainstats",
										"com"
									],
									"path": [
										"v2",
										"account",
										"vtho-info"
									],
									"query": [
										{
											"key": "address",
											"value": "0x0da8fa475c8272d21be204fe8112d1e2cd698c96"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "VET/VTHO",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.vechainstats.com/v2/account/vet-vtho?address=0xd0d9cd5aa98efcaeee2e065ddb8538fa977bc8eb",
									"protocol": "https",
									"host": [
										"api",
										"vechainstats",
										"com"
									],
									"path": [
										"v2",
										"account",
										"vet-vtho"
									],
									"query": [
										{
											"key": "address",
											"value": "0xd0d9cd5aa98efcaeee2e065ddb8538fa977bc8eb"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Transaction In",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.vechainstats.com/v2/account/txin?address=0x6c0A6e1d922E0e63901301573370b932AE20DAdB&page=1&sort=desc",
									"protocol": "https",
									"host": [
										"api",
										"vechainstats",
										"com"
									],
									"path": [
										"v2",
										"account",
										"txin"
									],
									"query": [
										{
											"key": "address",
											"value": "0x6c0A6e1d922E0e63901301573370b932AE20DAdB"
										},
										{
											"key": "page",
											"value": "1",
											"description": "(optional)"
										},
										{
											"key": "sort",
											"value": "desc",
											"description": "(optional)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Transaction Out",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.vechainstats.com/v2/account/txout?address=0xBC657722d8656297e6909c35243e019D5a98db39&page=1&sort=desc",
									"protocol": "https",
									"host": [
										"api",
										"vechainstats",
										"com"
									],
									"path": [
										"v2",
										"account",
										"txout"
									],
									"query": [
										{
											"key": "address",
											"value": "0xBC657722d8656297e6909c35243e019D5a98db39"
										},
										{
											"key": "page",
											"value": "1",
											"description": "(optional)"
										},
										{
											"key": "sort",
											"value": "desc",
											"description": "(optional)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Token Transfers",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.vechainstats.com/v2/account/token-transfers?token_type=vip180&address=0x57646a1ec3ec8807f42bc154de696f4010a94801&page=1&sort=desc",
									"protocol": "https",
									"host": [
										"api",
										"vechainstats",
										"com"
									],
									"path": [
										"v2",
										"account",
										"token-transfers"
									],
									"query": [
										{
											"key": "token_type",
											"value": "vip180",
											"description": "vet/vtho/vip180"
										},
										{
											"key": "address",
											"value": "0x57646a1ec3ec8807f42bc154de696f4010a94801"
										},
										{
											"key": "page",
											"value": "1",
											"description": "(optional)"
										},
										{
											"key": "sort",
											"value": "desc",
											"description": "(optional)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "NFT Transfers",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.vechainstats.com/v2/account/nft-transfers?address=0xc3f851f9f78c92573620582bf9002f0c4a114b67&page=1&sort=desc",
									"protocol": "https",
									"host": [
										"api",
										"vechainstats",
										"com"
									],
									"path": [
										"v2",
										"account",
										"nft-transfers"
									],
									"query": [
										{
											"key": "address",
											"value": "0xc3f851f9f78c92573620582bf9002f0c4a114b67"
										},
										{
											"key": "page",
											"value": "1",
											"description": "(optional)"
										},
										{
											"key": "sort",
											"value": "desc",
											"description": "(optional)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "DEX Trades",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.vechainstats.com/v2/account/dex-trades?address=0xa416bdda32b00e218f08ace220bab512c863ff2f&page=1&sort=desc",
									"protocol": "https",
									"host": [
										"api",
										"vechainstats",
										"com"
									],
									"path": [
										"v2",
										"account",
										"dex-trades"
									],
									"query": [
										{
											"key": "address",
											"value": "0xa416bdda32b00e218f08ace220bab512c863ff2f"
										},
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "sort",
											"value": "desc"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "DEPRECATED - Internal Transfers",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.vechainstats.com/v2/account/internal-transfers?address=0xc3f851f9f78c92573620582bf9002f0c4a114b67&page=1&sort=desc",
									"protocol": "https",
									"host": [
										"api",
										"vechainstats",
										"com"
									],
									"path": [
										"v2",
										"account",
										"internal-transfers"
									],
									"query": [
										{
											"key": "address",
											"value": "0xc3f851f9f78c92573620582bf9002f0c4a114b67"
										},
										{
											"key": "page",
											"value": "1",
											"description": "(optional)"
										},
										{
											"key": "sort",
											"value": "desc",
											"description": "(optional)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Historic VET/VTHO",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.vechainstats.com/v2/account/historic-vet-vtho?date=2021-08-01&address=0x44bc93a8d3cefa5a6721723a2f8d2e4f7d480ba0",
									"protocol": "https",
									"host": [
										"api",
										"vechainstats",
										"com"
									],
									"path": [
										"v2",
										"account",
										"historic-vet-vtho"
									],
									"query": [
										{
											"key": "date",
											"value": "2021-08-01"
										},
										{
											"key": "blocknum",
											"value": "1424522",
											"disabled": true
										},
										{
											"key": "address",
											"value": "0x44bc93a8d3cefa5a6721723a2f8d2e4f7d480ba0"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Token",
					"item": [
						{
							"name": "Token List",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.vechainstats.com/v2/token/list",
									"protocol": "https",
									"host": [
										"api",
										"vechainstats",
										"com"
									],
									"path": [
										"v2",
										"token",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "Token Info",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.vechainstats.com/v2/token/info?token=exo&expanded=true",
									"protocol": "https",
									"host": [
										"api",
										"vechainstats",
										"com"
									],
									"path": [
										"v2",
										"token",
										"info"
									],
									"query": [
										{
											"key": "token",
											"value": "exo"
										},
										{
											"key": "expanded",
											"value": "true",
											"description": "(optional)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Token Price",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.vechainstats.com/v2/token/price?token=vtho&expanded=true",
									"protocol": "https",
									"host": [
										"api",
										"vechainstats",
										"com"
									],
									"path": [
										"v2",
										"token",
										"price"
									],
									"query": [
										{
											"key": "token",
											"value": "vtho"
										},
										{
											"key": "expanded",
											"value": "true",
											"description": "(optional)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Token Price List",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.vechainstats.com/v2/token/price-list?expanded=true",
									"protocol": "https",
									"host": [
										"api",
										"vechainstats",
										"com"
									],
									"path": [
										"v2",
										"token",
										"price-list"
									],
									"query": [
										{
											"key": "expanded",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Token Supply",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.vechainstats.com/v2/token/supply?token=exo",
									"protocol": "https",
									"host": [
										"api",
										"vechainstats",
										"com"
									],
									"path": [
										"v2",
										"token",
										"supply"
									],
									"query": [
										{
											"key": "token",
											"value": "exo"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "VIP180",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.vechainstats.com/v2/token/vip180?address=0xd0d9cd5aa98efcaeee2e065ddb8538fa977bc8eb&expanded=true",
									"protocol": "https",
									"host": [
										"api",
										"vechainstats",
										"com"
									],
									"path": [
										"v2",
										"token",
										"vip180"
									],
									"query": [
										{
											"key": "address",
											"value": "0xd0d9cd5aa98efcaeee2e065ddb8538fa977bc8eb"
										},
										{
											"key": "expanded",
											"value": "true",
											"description": "(optional)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "VIP180 Custom",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.vechainstats.com/v2/token/vip180-custom?address=0x1263c741069eDa8056534661256079D485e111eB&contract=0x7aE288B7224Ad8740b2D4FC2B2C8A2392caEa3c6",
									"protocol": "https",
									"host": [
										"api",
										"vechainstats",
										"com"
									],
									"path": [
										"v2",
										"token",
										"vip180-custom"
									],
									"query": [
										{
											"key": "address",
											"value": "0x1263c741069eDa8056534661256079D485e111eB"
										},
										{
											"key": "contract",
											"value": "0x7aE288B7224Ad8740b2D4FC2B2C8A2392caEa3c6"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Token Holder List",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.vechainstats.com/v2/token/holder-list?token=vtho&threshold=15000000&page=1",
									"protocol": "https",
									"host": [
										"api",
										"vechainstats",
										"com"
									],
									"path": [
										"v2",
										"token",
										"holder-list"
									],
									"query": [
										{
											"key": "token",
											"value": "vtho"
										},
										{
											"key": "threshold",
											"value": "15000000",
											"description": "(optional) 'threshold/minimum' integer value of required Tokens"
										},
										{
											"key": "page",
											"value": "1"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Transaction",
					"item": [
						{
							"name": "Transaction Status",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.vechainstats.com/v2/transaction/status?txid=0x5f94d461fcb915d356de28cb865bf2ac1c4f22aafbbffeea81ca540b729e730a",
									"protocol": "https",
									"host": [
										"api",
										"vechainstats",
										"com"
									],
									"path": [
										"v2",
										"transaction",
										"status"
									],
									"query": [
										{
											"key": "txid",
											"value": "0x5f94d461fcb915d356de28cb865bf2ac1c4f22aafbbffeea81ca540b729e730a"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Transaction Info",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.vechainstats.com/v2/transaction/info?txid=0x1108c1098a2c3e750df24b65afa2f1d6f2b997202cc148df761768ec5c39a1a3",
									"protocol": "https",
									"host": [
										"api",
										"vechainstats",
										"com"
									],
									"path": [
										"v2",
										"transaction",
										"info"
									],
									"query": [
										{
											"key": "txid",
											"value": "0x1108c1098a2c3e750df24b65afa2f1d6f2b997202cc148df761768ec5c39a1a3"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Block",
					"item": [
						{
							"name": "Block Daily Stats",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.vechainstats.com/v2/block/stats?date=2023-06-02&expanded=true",
									"protocol": "https",
									"host": [
										"api",
										"vechainstats",
										"com"
									],
									"path": [
										"v2",
										"block",
										"stats"
									],
									"query": [
										{
											"key": "date",
											"value": "2023-06-02"
										},
										{
											"key": "expanded",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Block Info",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.vechainstats.com/v2/block/info?blocknum=16581454",
									"protocol": "https",
									"host": [
										"api",
										"vechainstats",
										"com"
									],
									"path": [
										"v2",
										"block",
										"info"
									],
									"query": [
										{
											"key": "blocknum",
											"value": "16581454"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Block Height (Current)",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.vechainstats.com/v2/block/height",
									"protocol": "https",
									"host": [
										"api",
										"vechainstats",
										"com"
									],
									"path": [
										"v2",
										"block",
										"height"
									]
								}
							},
							"response": []
						},
						{
							"name": "Block by Reference",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.vechainstats.com/v2/block/blockref?blockref=0x00fb6fb52e0d6d67",
									"protocol": "https",
									"host": [
										"api",
										"vechainstats",
										"com"
									],
									"path": [
										"v2",
										"block",
										"blockref"
									],
									"query": [
										{
											"key": "blockref",
											"value": "0x00fb6fb52e0d6d67"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Block by Timestamp",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.vechainstats.com/v2/block/blocktime?blockts=1695307034",
									"protocol": "https",
									"host": [
										"api",
										"vechainstats",
										"com"
									],
									"path": [
										"v2",
										"block",
										"blocktime"
									],
									"query": [
										{
											"key": "blockts",
											"value": "1695307034"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Contract",
					"item": [
						{
							"name": "Contract Stats",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.vechainstats.com/v2/contract/stats?date=2023-09-25&expanded=true",
									"protocol": "https",
									"host": [
										"api",
										"vechainstats",
										"com"
									],
									"path": [
										"v2",
										"contract",
										"stats"
									],
									"query": [
										{
											"key": "date",
											"value": "2023-09-25"
										},
										{
											"key": "expanded",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Contract Info",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.vechainstats.com/v2/contract/info?address=0xae4c53b120cba91a44832f875107cbc8fbee185c&expanded=true",
									"protocol": "https",
									"host": [
										"api",
										"vechainstats",
										"com"
									],
									"path": [
										"v2",
										"contract",
										"info"
									],
									"query": [
										{
											"key": "address",
											"value": "0xae4c53b120cba91a44832f875107cbc8fbee185c"
										},
										{
											"key": "expanded",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Contract Code",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.vechainstats.com/v2/contract/code?contract=0xeCC159751F9aed21399d5e3CE72BC9D4FcCB9cCc",
									"protocol": "https",
									"host": [
										"api",
										"vechainstats",
										"com"
									],
									"path": [
										"v2",
										"contract",
										"code"
									],
									"query": [
										{
											"key": "contract",
											"value": "0xeCC159751F9aed21399d5e3CE72BC9D4FcCB9cCc"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "NFT",
					"item": [
						{
							"name": "NFT Token List",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.vechainstats.com/v2/nft/list",
									"protocol": "https",
									"host": [
										"api",
										"vechainstats",
										"com"
									],
									"path": [
										"v2",
										"nft",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "NFT Info",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.vechainstats.com/v2/nft/info?id=exoworlds&expanded=true",
									"protocol": "https",
									"host": [
										"api",
										"vechainstats",
										"com"
									],
									"path": [
										"v2",
										"nft",
										"info"
									],
									"query": [
										{
											"key": "id",
											"value": "exoworlds"
										},
										{
											"key": "expanded",
											"value": "true",
											"description": "(optional)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "NFT Holder List",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.vechainstats.com/v2/nft/holder-list?id=exoworlds&threshold=5&page=1",
									"protocol": "https",
									"host": [
										"api",
										"vechainstats",
										"com"
									],
									"path": [
										"v2",
										"nft",
										"holder-list"
									],
									"query": [
										{
											"key": "id",
											"value": "exoworlds"
										},
										{
											"key": "threshold",
											"value": "5",
											"description": "(optional) 'threshold/minimum' value of required NFTs"
										},
										{
											"key": "page",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "VIP181",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.vechainstats.com/v2/nft/vip181?address=0xbBDA54E57f3FfdcF3d28F402326F5DF3a1c63778&id=&expanded=true",
									"protocol": "https",
									"host": [
										"api",
										"vechainstats",
										"com"
									],
									"path": [
										"v2",
										"nft",
										"vip181"
									],
									"query": [
										{
											"key": "address",
											"value": "0xbBDA54E57f3FfdcF3d28F402326F5DF3a1c63778"
										},
										{
											"key": "id",
											"value": "",
											"description": "(optional)"
										},
										{
											"key": "expanded",
											"value": "true",
											"description": "(optional)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "VIP181 Custom",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.vechainstats.com/v2/nft/vip181-custom?address=0x922b3D6Efe5DBC84D1F65Ad8597FA93DaDDE5a12&contract=0x4e34c1de5557e8464edc7519a416148f332a8d05",
									"protocol": "https",
									"host": [
										"api",
										"vechainstats",
										"com"
									],
									"path": [
										"v2",
										"nft",
										"vip181-custom"
									],
									"query": [
										{
											"key": "address",
											"value": "0x922b3D6Efe5DBC84D1F65Ad8597FA93DaDDE5a12"
										},
										{
											"key": "contract",
											"value": "0x4e34c1de5557e8464edc7519a416148f332a8d05"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Carbon",
					"item": [
						{
							"name": "Address Emission",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.vechainstats.com/v2/carbon/co2e-address?address=0x44bc93a8d3cefa5a6721723a2f8d2e4f7d480ba0&timeframe=2023-09-28",
									"protocol": "https",
									"host": [
										"api",
										"vechainstats",
										"com"
									],
									"path": [
										"v2",
										"carbon",
										"co2e-address"
									],
									"query": [
										{
											"key": "address",
											"value": "0x44bc93a8d3cefa5a6721723a2f8d2e4f7d480ba0"
										},
										{
											"key": "timeframe",
											"value": "2023-09-28",
											"description": "(optional) YYYY or YYYY-MM or YYYY-MM-DD"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Block Emission",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.vechainstats.com/v2/carbon/co2e-block?blocknum=16538235",
									"protocol": "https",
									"host": [
										"api",
										"vechainstats",
										"com"
									],
									"path": [
										"v2",
										"carbon",
										"co2e-block"
									],
									"query": [
										{
											"key": "blocknum",
											"value": "16538235",
											"description": "Block Height (Numeric)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Transaction Emission",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.vechainstats.com/v2/carbon/co2e-transaction?txid=0x8d838ce1e765135da16a44a4624943b3b96986c9ed26d56ca6f919f37918fb88",
									"protocol": "https",
									"host": [
										"api",
										"vechainstats",
										"com"
									],
									"path": [
										"v2",
										"carbon",
										"co2e-transaction"
									],
									"query": [
										{
											"key": "txid",
											"value": "0x8d838ce1e765135da16a44a4624943b3b96986c9ed26d56ca6f919f37918fb88"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Network Emission",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.vechainstats.com/v2/carbon/co2e-network?timeframe=2023",
									"protocol": "https",
									"host": [
										"api",
										"vechainstats",
										"com"
									],
									"path": [
										"v2",
										"carbon",
										"co2e-network"
									],
									"query": [
										{
											"key": "timeframe",
											"value": "2023",
											"description": "YYYY or YYYY-MM or YYYY-MM-DD"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Network",
					"item": [
						{
							"name": "Network Totals",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.vechainstats.com/v2/network/totals",
									"protocol": "https",
									"host": [
										"api",
										"vechainstats",
										"com"
									],
									"path": [
										"v2",
										"network",
										"totals"
									]
								}
							},
							"response": []
						},
						{
							"name": "Network Stats",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.vechainstats.com/v2/network/stats?timeframe=2023-09-01",
									"protocol": "https",
									"host": [
										"api",
										"vechainstats",
										"com"
									],
									"path": [
										"v2",
										"network",
										"stats"
									],
									"query": [
										{
											"key": "timeframe",
											"value": "2023-09-01",
											"description": "YYYY or YYYY-MM or YYYY-MM-DD"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Network Gas Stats",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.vechainstats.com/v2/network/gas-stats?timeframe=2023-09-28",
									"protocol": "https",
									"host": [
										"api",
										"vechainstats",
										"com"
									],
									"path": [
										"v2",
										"network",
										"gas-stats"
									],
									"query": [
										{
											"key": "timeframe",
											"value": "2023-09-28"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Authority Nodes",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.vechainstats.com/v2/network/authority-nodes?expanded=true",
									"protocol": "https",
									"host": [
										"api",
										"vechainstats",
										"com"
									],
									"path": [
										"v2",
										"network",
										"authority-nodes"
									],
									"query": [
										{
											"key": "expanded",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Mempool",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.vechainstats.com/v2/network/mempool?expanded=true",
									"protocol": "https",
									"host": [
										"api",
										"vechainstats",
										"com"
									],
									"path": [
										"v2",
										"network",
										"mempool"
									],
									"query": [
										{
											"key": "expanded",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Node Token Count",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.vechainstats.com/v2/network/node-token-count",
									"protocol": "https",
									"host": [
										"api",
										"vechainstats",
										"com"
									],
									"path": [
										"v2",
										"network",
										"node-token-count"
									]
								}
							},
							"response": []
						},
						{
							"name": "Node Token Stats",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.vechainstats.com/v2/network/node-token-stats",
									"protocol": "https",
									"host": [
										"api",
										"vechainstats",
										"com"
									],
									"path": [
										"v2",
										"network",
										"node-token-stats"
									]
								}
							},
							"response": []
						},
						{
							"name": "Thor Instance Size",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.vechainstats.com/v2/network/thor-instance-size",
									"protocol": "https",
									"host": [
										"api",
										"vechainstats",
										"com"
									],
									"path": [
										"v2",
										"network",
										"thor-instance-size"
									]
								}
							},
							"response": []
						},
						{
							"name": "X-Node List",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.vechainstats.com/v2/network/xnode-list?expanded=true",
									"protocol": "https",
									"host": [
										"api",
										"vechainstats",
										"com"
									],
									"path": [
										"v2",
										"network",
										"xnode-list"
									],
									"query": [
										{
											"key": "expanded",
											"value": "true"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Contract Verification",
					"item": [
						{
							"name": "Verify Contract (Standard JSON)",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "files",
											"description": "metadata.json",
											"type": "file",
											"src": []
										}
									]
								},
								"url": {
									"raw": "https://verify-api.vechainstats.com/v2/verify/100009/{address}",
									"protocol": "https",
									"host": [
										"verify-api",
										"vechainstats",
										"com"
									],
									"path": [
										"v2",
										"verify",
										"100009",
										"{address}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify Contract (Using Solidity metadata.json)",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"sources\": {},\n    \"metadata\":{\n        \"compiler\": {\n            \"version\": \"0.8.17+commit.8df45f5f\"\n        },\n        \"language\": \"Solidity\",\n        \"output\": {\n            \"abi\": [\n                {\n                    \"inputs\": [\n                        {\n                            \"internalType\": \"address\",\n                            \"name\": \"beacon\",\n                            \"type\": \"address\"\n                        },\n                        {\n                            \"internalType\": \"bytes\",\n                            \"name\": \"data\",\n                            \"type\": \"bytes\"\n                        }\n                    ],\n                    \"stateMutability\": \"payable\",\n                    \"type\": \"constructor\"\n                },\n                {\n                    \"anonymous\": false,\n                    \"inputs\": [\n                        {\n                            \"indexed\": false,\n                            \"internalType\": \"address\",\n                            \"name\": \"previousAdmin\",\n                            \"type\": \"address\"\n                        },\n                        {\n                            \"indexed\": false,\n                            \"internalType\": \"address\",\n                            \"name\": \"newAdmin\",\n                            \"type\": \"address\"\n                        }\n                    ],\n                    \"name\": \"AdminChanged\",\n                    \"type\": \"event\"\n                },\n                {\n                    \"anonymous\": false,\n                    \"inputs\": [\n                        {\n                            \"indexed\": true,\n                            \"internalType\": \"address\",\n                            \"name\": \"beacon\",\n                            \"type\": \"address\"\n                        }\n                    ],\n                    \"name\": \"BeaconUpgraded\",\n                    \"type\": \"event\"\n                },\n                {\n                    \"anonymous\": false,\n                    \"inputs\": [\n                        {\n                            \"indexed\": true,\n                            \"internalType\": \"address\",\n                            \"name\": \"implementation\",\n                            \"type\": \"address\"\n                        }\n                    ],\n                    \"name\": \"Upgraded\",\n                    \"type\": \"event\"\n                },\n                {\n                    \"stateMutability\": \"payable\",\n                    \"type\": \"fallback\"\n                },\n                {\n                    \"stateMutability\": \"payable\",\n                    \"type\": \"receive\"\n                }\n            ],\n            \"devdoc\": {\n                \"details\": \"This contract implements a proxy that gets the implementation address for each call from an {UpgradeableBeacon}. The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't conflict with the storage layout of the implementation behind the proxy. _Available since v3.4._\",\n                \"kind\": \"dev\",\n                \"methods\": {\n                    \"constructor\": {\n                        \"details\": \"Initializes the proxy with `beacon`. If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon. This will typically be an encoded function call, and allows initializing the storage of the proxy like a Solidity constructor. Requirements: - `beacon` must be a contract with the interface {IBeacon}.\"\n                    }\n                },\n                \"version\": 1\n            },\n            \"userdoc\": {\n                \"kind\": \"user\",\n                \"methods\": {},\n                \"version\": 1\n            }\n        },\n        \"settings\": {\n            \"compilationTarget\": {\n                \"@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol\": \"BeaconProxy\"\n            },\n            \"evmVersion\": \"london\",\n            \"libraries\": {},\n            \"metadata\": {\n                \"bytecodeHash\": \"ipfs\",\n                \"useLiteralContent\": true\n            },\n            \"optimizer\": {\n                \"enabled\": true,\n                \"runs\": 200\n            },\n            \"remappings\": []\n        },\n        \"sources\": {\n            \"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\": {\n                \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\n                \"keccak256\": \"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\n                \"license\": \"MIT\"\n            },\n            \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\": {\n                \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\n                \"keccak256\": \"0xabf3f59bc0e5423eae45e459dbe92e7052c6983628d39008590edc852a62f94a\",\n                \"license\": \"MIT\"\n            },\n            \"@openzeppelin/contracts/proxy/Proxy.sol\": {\n                \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\n                \"keccak256\": \"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\n                \"license\": \"MIT\"\n            },\n            \"@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol\": {\n                \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/beacon/BeaconProxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IBeacon.sol\\\";\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"../ERC1967/ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that gets the implementation address for each call from an {UpgradeableBeacon}.\\n *\\n * The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't\\n * conflict with the storage layout of the implementation behind the proxy.\\n *\\n * _Available since v3.4._\\n */\\ncontract BeaconProxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the proxy with `beacon`.\\n     *\\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon. This\\n     * will typically be an encoded function call, and allows initializing the storage of the proxy like a Solidity\\n     * constructor.\\n     *\\n     * Requirements:\\n     *\\n     * - `beacon` must be a contract with the interface {IBeacon}.\\n     */\\n    constructor(address beacon, bytes memory data) payable {\\n        _upgradeBeaconToAndCall(beacon, data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current beacon address.\\n     */\\n    function _beacon() internal view virtual returns (address) {\\n        return _getBeacon();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address of the associated beacon.\\n     */\\n    function _implementation() internal view virtual override returns (address) {\\n        return IBeacon(_getBeacon()).implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the proxy to use a new beacon. Deprecated: see {_upgradeBeaconToAndCall}.\\n     *\\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon.\\n     *\\n     * Requirements:\\n     *\\n     * - `beacon` must be a contract.\\n     * - The implementation returned by `beacon` must be a contract.\\n     */\\n    function _setBeacon(address beacon, bytes memory data) internal virtual {\\n        _upgradeBeaconToAndCall(beacon, data, false);\\n    }\\n}\\n\",\n                \"keccak256\": \"0x85439e74ab467b6a23d45d32bdc9506cbc3760320289afd605f11638c4138e95\",\n                \"license\": \"MIT\"\n            },\n            \"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\": {\n                \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\n                \"keccak256\": \"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\n                \"license\": \"MIT\"\n            },\n            \"@openzeppelin/contracts/utils/Address.sol\": {\n                \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\n                \"keccak256\": \"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\n                \"license\": \"MIT\"\n            },\n            \"@openzeppelin/contracts/utils/StorageSlot.sol\": {\n                \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\n                \"keccak256\": \"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\n                \"license\": \"MIT\"\n            }\n        },\n        \"version\": 1\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://verify-api.vechainstats.com/v2/verify/metadata/100009/{Address}",
									"protocol": "https",
									"host": [
										"verify-api",
										"vechainstats",
										"com"
									],
									"path": [
										"v2",
										"verify",
										"metadata",
										"100009",
										"{Address}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "API Info",
					"item": [
						{
							"name": "API Info",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.vechainstats.com/v2/api-info",
									"protocol": "https",
									"host": [
										"api",
										"vechainstats",
										"com"
									],
									"path": [
										"v2",
										"api-info"
									]
								}
							},
							"response": []
						},
						{
							"name": "API Ping",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.vechainstats.com/v2/api-ping",
									"protocol": "https",
									"host": [
										"api",
										"vechainstats",
										"com"
									],
									"path": [
										"v2",
										"api-ping"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"if(pm.variables.get('api_key') != '' && pm.variables.get('api_key') != '<YOUR-API-KEY>') {",
					"    let Header = require('postman-collection').Header",
					"    pm.request.headers.add(new Header(\"X-API-Key: {{api_key}}\"))",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "api_key",
			"value": ""
		}
	]
}